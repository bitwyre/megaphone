// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TICKER_BITWYRE_FLATBUFFERS_TICKER_H_
#define FLATBUFFERS_GENERATED_TICKER_BITWYRE_FLATBUFFERS_TICKER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Bitwyre {
namespace Flatbuffers {
namespace Ticker {

struct TickerEvent;
struct TickerEventBuilder;

inline const ::flatbuffers::TypeTable *TickerEventTypeTable();

struct TickerEvent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TickerEventBuilder Builder;
  struct Traits;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TickerEventTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TABLE = 4,
    VT_ACTION = 6,
    VT_LAST_PRICE = 8,
    VT_LAST_SIZE = 10,
    VT_OPEN24H = 12,
    VT_INSTRUMENT = 14,
    VT_BASE_ASSET = 16,
    VT_QUOTE_ASSET = 18,
    VT_HIGH_PRICE = 20,
    VT_LOW_PRICE = 22,
    VT_PCT_CHANGE = 24,
    VT_VOL_QTY_BASE = 26,
    VT_VOL_QTY_QUOTE = 28,
    VT_BID_PRICE = 30,
    VT_ASK_PRICE = 32,
    VT_TIMESTAMP = 34
  };
  const ::flatbuffers::String *table() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TABLE);
  }
  const ::flatbuffers::String *action() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTION);
  }
  const ::flatbuffers::String *last_price() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAST_PRICE);
  }
  const ::flatbuffers::String *last_size() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAST_SIZE);
  }
  const ::flatbuffers::String *open24h() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPEN24H);
  }
  const ::flatbuffers::String *instrument() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSTRUMENT);
  }
  const ::flatbuffers::String *base_asset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BASE_ASSET);
  }
  const ::flatbuffers::String *quote_asset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_QUOTE_ASSET);
  }
  const ::flatbuffers::String *high_price() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HIGH_PRICE);
  }
  const ::flatbuffers::String *low_price() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOW_PRICE);
  }
  const ::flatbuffers::String *pct_change() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PCT_CHANGE);
  }
  const ::flatbuffers::String *vol_qty_base() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VOL_QTY_BASE);
  }
  const ::flatbuffers::String *vol_qty_quote() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VOL_QTY_QUOTE);
  }
  const ::flatbuffers::String *bid_price() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BID_PRICE);
  }
  const ::flatbuffers::String *ask_price() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ASK_PRICE);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TABLE) &&
           verifier.VerifyString(table()) &&
           VerifyOffset(verifier, VT_ACTION) &&
           verifier.VerifyString(action()) &&
           VerifyOffset(verifier, VT_LAST_PRICE) &&
           verifier.VerifyString(last_price()) &&
           VerifyOffset(verifier, VT_LAST_SIZE) &&
           verifier.VerifyString(last_size()) &&
           VerifyOffset(verifier, VT_OPEN24H) &&
           verifier.VerifyString(open24h()) &&
           VerifyOffset(verifier, VT_INSTRUMENT) &&
           verifier.VerifyString(instrument()) &&
           VerifyOffset(verifier, VT_BASE_ASSET) &&
           verifier.VerifyString(base_asset()) &&
           VerifyOffset(verifier, VT_QUOTE_ASSET) &&
           verifier.VerifyString(quote_asset()) &&
           VerifyOffset(verifier, VT_HIGH_PRICE) &&
           verifier.VerifyString(high_price()) &&
           VerifyOffset(verifier, VT_LOW_PRICE) &&
           verifier.VerifyString(low_price()) &&
           VerifyOffset(verifier, VT_PCT_CHANGE) &&
           verifier.VerifyString(pct_change()) &&
           VerifyOffset(verifier, VT_VOL_QTY_BASE) &&
           verifier.VerifyString(vol_qty_base()) &&
           VerifyOffset(verifier, VT_VOL_QTY_QUOTE) &&
           verifier.VerifyString(vol_qty_quote()) &&
           VerifyOffset(verifier, VT_BID_PRICE) &&
           verifier.VerifyString(bid_price()) &&
           VerifyOffset(verifier, VT_ASK_PRICE) &&
           verifier.VerifyString(ask_price()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           verifier.EndTable();
  }
};

struct TickerEventBuilder {
  typedef TickerEvent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_table(::flatbuffers::Offset<::flatbuffers::String> table) {
    fbb_.AddOffset(TickerEvent::VT_TABLE, table);
  }
  void add_action(::flatbuffers::Offset<::flatbuffers::String> action) {
    fbb_.AddOffset(TickerEvent::VT_ACTION, action);
  }
  void add_last_price(::flatbuffers::Offset<::flatbuffers::String> last_price) {
    fbb_.AddOffset(TickerEvent::VT_LAST_PRICE, last_price);
  }
  void add_last_size(::flatbuffers::Offset<::flatbuffers::String> last_size) {
    fbb_.AddOffset(TickerEvent::VT_LAST_SIZE, last_size);
  }
  void add_open24h(::flatbuffers::Offset<::flatbuffers::String> open24h) {
    fbb_.AddOffset(TickerEvent::VT_OPEN24H, open24h);
  }
  void add_instrument(::flatbuffers::Offset<::flatbuffers::String> instrument) {
    fbb_.AddOffset(TickerEvent::VT_INSTRUMENT, instrument);
  }
  void add_base_asset(::flatbuffers::Offset<::flatbuffers::String> base_asset) {
    fbb_.AddOffset(TickerEvent::VT_BASE_ASSET, base_asset);
  }
  void add_quote_asset(::flatbuffers::Offset<::flatbuffers::String> quote_asset) {
    fbb_.AddOffset(TickerEvent::VT_QUOTE_ASSET, quote_asset);
  }
  void add_high_price(::flatbuffers::Offset<::flatbuffers::String> high_price) {
    fbb_.AddOffset(TickerEvent::VT_HIGH_PRICE, high_price);
  }
  void add_low_price(::flatbuffers::Offset<::flatbuffers::String> low_price) {
    fbb_.AddOffset(TickerEvent::VT_LOW_PRICE, low_price);
  }
  void add_pct_change(::flatbuffers::Offset<::flatbuffers::String> pct_change) {
    fbb_.AddOffset(TickerEvent::VT_PCT_CHANGE, pct_change);
  }
  void add_vol_qty_base(::flatbuffers::Offset<::flatbuffers::String> vol_qty_base) {
    fbb_.AddOffset(TickerEvent::VT_VOL_QTY_BASE, vol_qty_base);
  }
  void add_vol_qty_quote(::flatbuffers::Offset<::flatbuffers::String> vol_qty_quote) {
    fbb_.AddOffset(TickerEvent::VT_VOL_QTY_QUOTE, vol_qty_quote);
  }
  void add_bid_price(::flatbuffers::Offset<::flatbuffers::String> bid_price) {
    fbb_.AddOffset(TickerEvent::VT_BID_PRICE, bid_price);
  }
  void add_ask_price(::flatbuffers::Offset<::flatbuffers::String> ask_price) {
    fbb_.AddOffset(TickerEvent::VT_ASK_PRICE, ask_price);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(TickerEvent::VT_TIMESTAMP, timestamp, 0);
  }
  explicit TickerEventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TickerEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TickerEvent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TickerEvent> CreateTickerEvent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> table = 0,
    ::flatbuffers::Offset<::flatbuffers::String> action = 0,
    ::flatbuffers::Offset<::flatbuffers::String> last_price = 0,
    ::flatbuffers::Offset<::flatbuffers::String> last_size = 0,
    ::flatbuffers::Offset<::flatbuffers::String> open24h = 0,
    ::flatbuffers::Offset<::flatbuffers::String> instrument = 0,
    ::flatbuffers::Offset<::flatbuffers::String> base_asset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> quote_asset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> high_price = 0,
    ::flatbuffers::Offset<::flatbuffers::String> low_price = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pct_change = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vol_qty_base = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vol_qty_quote = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bid_price = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ask_price = 0,
    uint64_t timestamp = 0) {
  TickerEventBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_ask_price(ask_price);
  builder_.add_bid_price(bid_price);
  builder_.add_vol_qty_quote(vol_qty_quote);
  builder_.add_vol_qty_base(vol_qty_base);
  builder_.add_pct_change(pct_change);
  builder_.add_low_price(low_price);
  builder_.add_high_price(high_price);
  builder_.add_quote_asset(quote_asset);
  builder_.add_base_asset(base_asset);
  builder_.add_instrument(instrument);
  builder_.add_open24h(open24h);
  builder_.add_last_size(last_size);
  builder_.add_last_price(last_price);
  builder_.add_action(action);
  builder_.add_table(table);
  return builder_.Finish();
}

struct TickerEvent::Traits {
  using type = TickerEvent;
  static auto constexpr Create = CreateTickerEvent;
};

inline ::flatbuffers::Offset<TickerEvent> CreateTickerEventDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *table = nullptr,
    const char *action = nullptr,
    const char *last_price = nullptr,
    const char *last_size = nullptr,
    const char *open24h = nullptr,
    const char *instrument = nullptr,
    const char *base_asset = nullptr,
    const char *quote_asset = nullptr,
    const char *high_price = nullptr,
    const char *low_price = nullptr,
    const char *pct_change = nullptr,
    const char *vol_qty_base = nullptr,
    const char *vol_qty_quote = nullptr,
    const char *bid_price = nullptr,
    const char *ask_price = nullptr,
    uint64_t timestamp = 0) {
  auto table__ = table ? _fbb.CreateString(table) : 0;
  auto action__ = action ? _fbb.CreateString(action) : 0;
  auto last_price__ = last_price ? _fbb.CreateString(last_price) : 0;
  auto last_size__ = last_size ? _fbb.CreateString(last_size) : 0;
  auto open24h__ = open24h ? _fbb.CreateString(open24h) : 0;
  auto instrument__ = instrument ? _fbb.CreateString(instrument) : 0;
  auto base_asset__ = base_asset ? _fbb.CreateString(base_asset) : 0;
  auto quote_asset__ = quote_asset ? _fbb.CreateString(quote_asset) : 0;
  auto high_price__ = high_price ? _fbb.CreateString(high_price) : 0;
  auto low_price__ = low_price ? _fbb.CreateString(low_price) : 0;
  auto pct_change__ = pct_change ? _fbb.CreateString(pct_change) : 0;
  auto vol_qty_base__ = vol_qty_base ? _fbb.CreateString(vol_qty_base) : 0;
  auto vol_qty_quote__ = vol_qty_quote ? _fbb.CreateString(vol_qty_quote) : 0;
  auto bid_price__ = bid_price ? _fbb.CreateString(bid_price) : 0;
  auto ask_price__ = ask_price ? _fbb.CreateString(ask_price) : 0;
  return Bitwyre::Flatbuffers::Ticker::CreateTickerEvent(
      _fbb,
      table__,
      action__,
      last_price__,
      last_size__,
      open24h__,
      instrument__,
      base_asset__,
      quote_asset__,
      high_price__,
      low_price__,
      pct_change__,
      vol_qty_base__,
      vol_qty_quote__,
      bid_price__,
      ask_price__,
      timestamp);
}

inline const ::flatbuffers::TypeTable *TickerEventTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_ULONG, 0, -1 }
  };
  static const char * const names[] = {
    "table",
    "action",
    "last_price",
    "last_size",
    "open24h",
    "instrument",
    "base_asset",
    "quote_asset",
    "high_price",
    "low_price",
    "pct_change",
    "vol_qty_base",
    "vol_qty_quote",
    "bid_price",
    "ask_price",
    "timestamp"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 16, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const Bitwyre::Flatbuffers::Ticker::TickerEvent *GetTickerEvent(const void *buf) {
  return ::flatbuffers::GetRoot<Bitwyre::Flatbuffers::Ticker::TickerEvent>(buf);
}

inline const Bitwyre::Flatbuffers::Ticker::TickerEvent *GetSizePrefixedTickerEvent(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Bitwyre::Flatbuffers::Ticker::TickerEvent>(buf);
}

inline bool VerifyTickerEventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Bitwyre::Flatbuffers::Ticker::TickerEvent>(nullptr);
}

inline bool VerifySizePrefixedTickerEventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Bitwyre::Flatbuffers::Ticker::TickerEvent>(nullptr);
}

inline void FinishTickerEventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Bitwyre::Flatbuffers::Ticker::TickerEvent> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTickerEventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Bitwyre::Flatbuffers::Ticker::TickerEvent> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Ticker
}  // namespace Flatbuffers
}  // namespace Bitwyre

#endif  // FLATBUFFERS_GENERATED_TICKER_BITWYRE_FLATBUFFERS_TICKER_H_
