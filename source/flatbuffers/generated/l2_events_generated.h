// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_L2EVENTS_BITWYRE_FLATBUFFERS_L2EVENT_H_
#define FLATBUFFERS_GENERATED_L2EVENTS_BITWYRE_FLATBUFFERS_L2EVENT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Bitwyre {
namespace Flatbuffers {
namespace L2Event {

struct L2Event;
struct L2EventBuilder;

inline const ::flatbuffers::TypeTable *L2EventTypeTable();

struct L2Event FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef L2EventBuilder Builder;
  struct Traits;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return L2EventTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRICE = 4,
    VT_QTY = 6,
    VT_SIDE = 8,
    VT_SYMBOL = 10,
    VT_TIMESTAMP = 12
  };
  const ::flatbuffers::String *price() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRICE);
  }
  const ::flatbuffers::String *qty() const {
    return GetPointer<const ::flatbuffers::String *>(VT_QTY);
  }
  bool side() const {
    return GetField<uint8_t>(VT_SIDE, 0) != 0;
  }
  const ::flatbuffers::String *symbol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMBOL);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PRICE) &&
           verifier.VerifyString(price()) &&
           VerifyOffset(verifier, VT_QTY) &&
           verifier.VerifyString(qty()) &&
           VerifyField<uint8_t>(verifier, VT_SIDE, 1) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           verifier.EndTable();
  }
};

struct L2EventBuilder {
  typedef L2Event Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_price(::flatbuffers::Offset<::flatbuffers::String> price) {
    fbb_.AddOffset(L2Event::VT_PRICE, price);
  }
  void add_qty(::flatbuffers::Offset<::flatbuffers::String> qty) {
    fbb_.AddOffset(L2Event::VT_QTY, qty);
  }
  void add_side(bool side) {
    fbb_.AddElement<uint8_t>(L2Event::VT_SIDE, static_cast<uint8_t>(side), 0);
  }
  void add_symbol(::flatbuffers::Offset<::flatbuffers::String> symbol) {
    fbb_.AddOffset(L2Event::VT_SYMBOL, symbol);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(L2Event::VT_TIMESTAMP, timestamp, 0);
  }
  explicit L2EventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<L2Event> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<L2Event>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<L2Event> CreateL2Event(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> price = 0,
    ::flatbuffers::Offset<::flatbuffers::String> qty = 0,
    bool side = false,
    ::flatbuffers::Offset<::flatbuffers::String> symbol = 0,
    uint64_t timestamp = 0) {
  L2EventBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_symbol(symbol);
  builder_.add_qty(qty);
  builder_.add_price(price);
  builder_.add_side(side);
  return builder_.Finish();
}

struct L2Event::Traits {
  using type = L2Event;
  static auto constexpr Create = CreateL2Event;
};

inline ::flatbuffers::Offset<L2Event> CreateL2EventDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *price = nullptr,
    const char *qty = nullptr,
    bool side = false,
    const char *symbol = nullptr,
    uint64_t timestamp = 0) {
  auto price__ = price ? _fbb.CreateString(price) : 0;
  auto qty__ = qty ? _fbb.CreateString(qty) : 0;
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  return Bitwyre::Flatbuffers::L2Event::CreateL2Event(
      _fbb,
      price__,
      qty__,
      side,
      symbol__,
      timestamp);
}

inline const ::flatbuffers::TypeTable *L2EventTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_ULONG, 0, -1 }
  };
  static const char * const names[] = {
    "price",
    "qty",
    "side",
    "symbol",
    "timestamp"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const Bitwyre::Flatbuffers::L2Event::L2Event *GetL2Event(const void *buf) {
  return ::flatbuffers::GetRoot<Bitwyre::Flatbuffers::L2Event::L2Event>(buf);
}

inline const Bitwyre::Flatbuffers::L2Event::L2Event *GetSizePrefixedL2Event(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Bitwyre::Flatbuffers::L2Event::L2Event>(buf);
}

inline bool VerifyL2EventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Bitwyre::Flatbuffers::L2Event::L2Event>(nullptr);
}

inline bool VerifySizePrefixedL2EventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Bitwyre::Flatbuffers::L2Event::L2Event>(nullptr);
}

inline void FinishL2EventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Bitwyre::Flatbuffers::L2Event::L2Event> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedL2EventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Bitwyre::Flatbuffers::L2Event::L2Event> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace L2Event
}  // namespace Flatbuffers
}  // namespace Bitwyre

#endif  // FLATBUFFERS_GENERATED_L2EVENTS_BITWYRE_FLATBUFFERS_L2EVENT_H_
