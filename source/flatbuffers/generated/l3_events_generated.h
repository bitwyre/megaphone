// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_L3EVENTS_BITWYRE_FLATBUFFERS_L3EVENT_H_
#define FLATBUFFERS_GENERATED_L3EVENTS_BITWYRE_FLATBUFFERS_L3EVENT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Bitwyre {
namespace Flatbuffers {
namespace L3Event {

struct L3Event;
struct L3EventBuilder;

struct L3Event FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef L3EventBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRICE = 4,
    VT_QTY = 6,
    VT_SIDE = 8,
    VT_SYMBOL = 10,
    VT_SEQUENCE = 12,
    VT_TYPE = 14,
    VT_ORDER_ID = 16,
    VT_TIMESTAMP = 18
  };
  double price() const {
    return GetField<double>(VT_PRICE, 0.0);
  }
  double qty() const {
    return GetField<double>(VT_QTY, 0.0);
  }
  bool side() const {
    return GetField<uint8_t>(VT_SIDE, 0) != 0;
  }
  const ::flatbuffers::String *symbol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMBOL);
  }
  uint64_t sequence() const {
    return GetField<uint64_t>(VT_SEQUENCE, 0);
  }
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  const ::flatbuffers::String *order_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORDER_ID);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return price();
    else if constexpr (Index == 1) return qty();
    else if constexpr (Index == 2) return side();
    else if constexpr (Index == 3) return symbol();
    else if constexpr (Index == 4) return sequence();
    else if constexpr (Index == 5) return type();
    else if constexpr (Index == 6) return order_id();
    else if constexpr (Index == 7) return timestamp();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_PRICE, 8) &&
           VerifyField<double>(verifier, VT_QTY, 8) &&
           VerifyField<uint8_t>(verifier, VT_SIDE, 1) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyField<uint64_t>(verifier, VT_SEQUENCE, 8) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_ORDER_ID) &&
           verifier.VerifyString(order_id()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           verifier.EndTable();
  }
};

struct L3EventBuilder {
  typedef L3Event Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_price(double price) {
    fbb_.AddElement<double>(L3Event::VT_PRICE, price, 0.0);
  }
  void add_qty(double qty) {
    fbb_.AddElement<double>(L3Event::VT_QTY, qty, 0.0);
  }
  void add_side(bool side) {
    fbb_.AddElement<uint8_t>(L3Event::VT_SIDE, static_cast<uint8_t>(side), 0);
  }
  void add_symbol(::flatbuffers::Offset<::flatbuffers::String> symbol) {
    fbb_.AddOffset(L3Event::VT_SYMBOL, symbol);
  }
  void add_sequence(uint64_t sequence) {
    fbb_.AddElement<uint64_t>(L3Event::VT_SEQUENCE, sequence, 0);
  }
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(L3Event::VT_TYPE, type, 0);
  }
  void add_order_id(::flatbuffers::Offset<::flatbuffers::String> order_id) {
    fbb_.AddOffset(L3Event::VT_ORDER_ID, order_id);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(L3Event::VT_TIMESTAMP, timestamp, 0);
  }
  explicit L3EventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<L3Event> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<L3Event>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<L3Event> CreateL3Event(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double price = 0.0,
    double qty = 0.0,
    bool side = false,
    ::flatbuffers::Offset<::flatbuffers::String> symbol = 0,
    uint64_t sequence = 0,
    uint8_t type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> order_id = 0,
    uint64_t timestamp = 0) {
  L3EventBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_sequence(sequence);
  builder_.add_qty(qty);
  builder_.add_price(price);
  builder_.add_order_id(order_id);
  builder_.add_symbol(symbol);
  builder_.add_type(type);
  builder_.add_side(side);
  return builder_.Finish();
}

struct L3Event::Traits {
  using type = L3Event;
  static auto constexpr Create = CreateL3Event;
  static constexpr auto name = "L3Event";
  static constexpr auto fully_qualified_name = "Bitwyre.Flatbuffers.L3Event.L3Event";
  static constexpr size_t fields_number = 8;
  static constexpr std::array<const char *, fields_number> field_names = {
    "price",
    "qty",
    "side",
    "symbol",
    "sequence",
    "type",
    "order_id",
    "timestamp"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline ::flatbuffers::Offset<L3Event> CreateL3EventDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double price = 0.0,
    double qty = 0.0,
    bool side = false,
    const char *symbol = nullptr,
    uint64_t sequence = 0,
    uint8_t type = 0,
    const char *order_id = nullptr,
    uint64_t timestamp = 0) {
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  auto order_id__ = order_id ? _fbb.CreateString(order_id) : 0;
  return Bitwyre::Flatbuffers::L3Event::CreateL3Event(
      _fbb,
      price,
      qty,
      side,
      symbol__,
      sequence,
      type,
      order_id__,
      timestamp);
}

inline const Bitwyre::Flatbuffers::L3Event::L3Event *GetL3Event(const void *buf) {
  return ::flatbuffers::GetRoot<Bitwyre::Flatbuffers::L3Event::L3Event>(buf);
}

inline const Bitwyre::Flatbuffers::L3Event::L3Event *GetSizePrefixedL3Event(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Bitwyre::Flatbuffers::L3Event::L3Event>(buf);
}

inline bool VerifyL3EventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Bitwyre::Flatbuffers::L3Event::L3Event>(nullptr);
}

inline bool VerifySizePrefixedL3EventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Bitwyre::Flatbuffers::L3Event::L3Event>(nullptr);
}

inline void FinishL3EventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Bitwyre::Flatbuffers::L3Event::L3Event> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedL3EventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Bitwyre::Flatbuffers::L3Event::L3Event> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace L3Event
}  // namespace Flatbuffers
}  // namespace Bitwyre

#endif  // FLATBUFFERS_GENERATED_L3EVENTS_BITWYRE_FLATBUFFERS_L3EVENT_H_
